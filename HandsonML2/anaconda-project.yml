# This is an Anaconda project file.
#
# Here you can describe your project and how to run it.
# Use `anaconda-project run` to run the project.
# The file is in YAML format, please see http://www.yaml.org/start.html for more.
#

#
# Set the 'name' key to name your project
#
name: HandsonML2



#
# Set the 'icon' key to give your project an icon
#
icon:




#
# Set a one-sentence-or-so 'description' key with project details
#
description:




#
# In the commands section, list your runnable scripts, notebooks, and other code.
# Use `anaconda-project add-command` to add commands.
#
commands:
  01_the_machine_learning_landscape.ipynb:
    notebook: 01_the_machine_learning_landscape.ipynb
    env_spec: tf2
  02_end_to_end_machine_learning_project.ipynb:
    notebook: 02_end_to_end_machine_learning_project.ipynb
    env_spec: tf2
  03_classification.ipynb:
    notebook: 03_classification.ipynb
    env_spec: tf2
  04_training_linear_models.ipynb:
    notebook: 04_training_linear_models.ipynb
    env_spec: tf2
  05_support_vector_machines.ipynb:
    notebook: 05_support_vector_machines.ipynb
    env_spec: tf2
  06_decision_trees.ipynb:
    notebook: 06_decision_trees.ipynb
    env_spec: tf2
  07_ensemble_learning_and_random_forests.ipynb:
    notebook: 07_ensemble_learning_and_random_forests.ipynb
    env_spec: tf2
  08_dimensionality_reduction.ipynb:
    notebook: 08_dimensionality_reduction.ipynb
    env_spec: tf2
  09_unsupervised_learning.ipynb:
    notebook: 09_unsupervised_learning.ipynb
    env_spec: tf2
  10_neural_nets_with_keras.ipynb:
    notebook: 10_neural_nets_with_keras.ipynb
    env_spec: tf2
  11_training_deep_neural_networks.ipynb:
    notebook: 11_training_deep_neural_networks.ipynb
    env_spec: tf2
  12_custom_models_and_training_with_tensorflow.ipynb:
    notebook: 12_custom_models_and_training_with_tensorflow.ipynb
    env_spec: tf2
  13_loading_and_preprocessing_data.ipynb:
    notebook: 13_loading_and_preprocessing_data.ipynb
    env_spec: tf2
  14_deep_computer_vision_with_cnns.ipynb:
    notebook: 14_deep_computer_vision_with_cnns.ipynb
    env_spec: tf2
  15_processing_sequences_using_rnns_and_cnns.ipynb:
    notebook: 15_processing_sequences_using_rnns_and_cnns.ipynb
    env_spec: tf2
  16_nlp_with_rnns_and_attention.ipynb:
    notebook: 16_nlp_with_rnns_and_attention.ipynb
    env_spec: tf2
  17_autoencoders_and_gans.ipynb:
    notebook: 17_autoencoders_and_gans.ipynb
    env_spec: tf2
  18_reinforcement_learning.ipynb:
    notebook: 18_reinforcement_learning.ipynb
    env_spec: tf2
  19_training_and_deploying_at_scale.ipynb:
    notebook: 19_training_and_deploying_at_scale.ipynb
    env_spec: tf2
  book_equations.ipynb:
    notebook: book_equations.ipynb
    env_spec: tf2
  extra_gradient_descent_comparison.ipynb:
    notebook: extra_gradient_descent_comparison.ipynb
    env_spec: tf2
  index.ipynb:
    notebook: index.ipynb
    env_spec: tf2
  math_linear_algebra.ipynb:
    notebook: math_linear_algebra.ipynb
    env_spec: tf2
  tools_matplotlib.ipynb:
    notebook: tools_matplotlib.ipynb
    env_spec: tf2
  tools_numpy.ipynb:
    notebook: tools_numpy.ipynb
    env_spec: tf2
  tools_pandas.ipynb:
    notebook: tools_pandas.ipynb
    env_spec: tf2
  work_in_progress/extra_autodiff.ipynb:
    notebook: work_in_progress/extra_autodiff.ipynb
    env_spec: tf2
  work_in_progress/extra_capsnets-cn.ipynb:
    notebook: work_in_progress/extra_capsnets-cn.ipynb
    env_spec: tf2
  work_in_progress/extra_capsnets.ipynb:
    notebook: work_in_progress/extra_capsnets.ipynb
    env_spec: tf2
  work_in_progress/extra_tensorflow_reproducibility.ipynb:
    notebook: work_in_progress/extra_tensorflow_reproducibility.ipynb
    env_spec: tf2



#
# In the variables section, list any environment variables your code depends on.
# Use `anaconda-project add-variable` to add variables.
#
variables: {}



#
# In the services section, list any services that should be
# available before your code runs.
# Use `anaconda-project add-service` to add services.
#
services: {}



#
# In the downloads section, list any URLs to download to local files
# before your code runs.
# Use `anaconda-project add-download` to add downloads.
#
downloads: {}



#
# In the packages section, list any packages that must be installed
# before your code runs.
# Use `anaconda-project add-packages` to add packages.
#
packages:
- graphviz
- imageio=2.6.1
- ipython=7.10.1
- ipywidgets=7.5.1
- joblib=0.14.0
- jupyter=1.0.0
- matplotlib=3.1.2
- nbdime=1.1.0
- nltk=3.4.5
- numexpr=2.7.0
- numpy=1.17.3
- pandas=0.25.3
- pillow=6.2.1
- pip
- py-xgboost=0.90
- pydot=1.4.1
- pyopengl=3.1.3b2
- python=3.7
- python-graphviz
- requests=2.22.0
- scikit-image=0.16.2
- scikit-learn=0.22
- scipy=1.3.1
- tqdm=4.40.0
- tensorboard=2.0.0
- tensorflow=2.0.0
- tensorflow-datasets=1.2.0
- tensorflow-estimator=2.0.0
- tensorflow-hub=0.7.0
- tensorflow-probability=0.7
- wheel
- widgetsnbextension=3.5.1
- pip:
  - atari-py==0.2.6
  - gym==0.15.4
  - opencv-python==4.1.2.30
  - psutil==5.6.7
  - pyglet==1.3.2
  - tensorflow-addons==0.6.0
  - tensorflow-data-validation==0.15.0
  - tensorflow-metadata==0.15.1
  - tensorflow-model-analysis==0.15.4
  - tensorflow-serving-api==2.0.0
  - tensorflow-transform==0.15.0
  - tf-agents==0.3.0rc0
  - tfx==0.15.0
  - urlextract==0.13.0



#
# In the channels section, list any Conda channel URLs to be searched
# for packages.
#
# For example,
#
# channels:
#    - mychannel
#
channels:
- conda-forge
- defaults



#
# In the platforms section, list platforms the project should work on
# Examples: "linux-64", "osx-64", "win-64"
# Use `anaconda-project add-platforms` to add platforms.
#
platforms:
- linux-64
- osx-64
- win-64



#
# You can define multiple, named environment specs.
# Each inherits any global packages or channels,
# but can have its own unique ones also.
# Use `anaconda-project add-env-spec` to add environment specs.
#
env_specs:
  tf2:
    packages:
    - notebook
    channels: []


